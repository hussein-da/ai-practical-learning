version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2 # Use a specific stable version
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: CMD-SHELL echo ruok | nc localhost 2181
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.3.2 # Use a specific stable version matching zookeeper
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      # Expose Kafka broker listener on host port 9092
      - "9092:9092"
      # Optional: If you need external access beyond docker host (e.g. other machines), configure advertised listeners carefully
      # - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      # Listener configuration within the Docker network
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # Listeners accessible from the host machine (and Python scripts running on host)
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      # Optional: Configuration for topic auto-creation (enabled by default usually)
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # For single node setup
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1 # Required for Confluent images >= 5.4
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1 # For single node setup
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1 # For single node setup
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092"] 
      interval: 15s
      timeout: 10s
      retries: 10

# Optional: Add volumes if you want data to persist after docker-compose down
# volumes:
#   zookeeper_data:
#     driver: local
#   kafka_data:
#     driver: local
# (Then add volume mounts to the respective services) 